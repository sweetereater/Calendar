{"version":3,"sources":["Components/TaskRedactor/TaskRedactor.module.css","Components/Calendar/MonthTable/Day/Day.module.css","Components/DateManager/TaskItem/TaskItem.module.css","Components/Notifications/Notifications.module.css","Components/Calendar/MonthTable/MonthTable.module.css","Components/Calendar/Calendar.module.css","Components/Calendar/DatePanel/DatePanel.module.css","Components/Calendar/DatePanel/DateSelect/DateSelect.module.css","Components/Calendar/DatePanel/DateSelect/DateSelect.js","redux/generateMonth.js","redux/mainReducer.js","Components/Calendar/DatePanel/DatePanel.js","redux/tasksReducer.js","Components/Calendar/MonthTable/Day/Day.js","Components/Calendar/MonthTable/MonthTable.js","Components/Calendar/Calendar.js","Components/DateManager/TaskItem/TaskItem.js","redux/notificationReducer.js","Components/DateManager/DateManager.js","Components/TaskRedactor/TaskRedactor.js","Components/Notifications/Notifications.js","App.js","redux/store.js","index.js","Components/DateManager/DateManager.module.css"],"names":["module","exports","DateSelect","value","items","onChange","className","s","select","event","Number","currentTarget","map","item","index","number","title","React","memo","generateMonthData","year","month","allDays","curMonth","Date","day","getDay","monthLastDay","getDate","prevMonth","prevMonthLastDay","start","push","getMonth","date","length","nextMonth","SET_YEAR","SET_MONTH","currentDate","getFullYear","currentDay","days","years","months","initialState","currentYear","currentMonth","mainReducer","state","action","type","payload","DatePanel","useSelector","calendarPage","dispatch","useDispatch","datePanel","setYear","setMonth","CHANGE_NEW_TASK_TEXT","CHANGE_NEW_TASK_START_TIME","CHANGE_NEW_TASK_END_TIME","CHANGE_NEW_TASK_REMIND_TIME","CREATE_NEW_TASK","DELETE_TASK","UPDATE_TASK","SHOW_SUCCESSFUL_PANEL","LOAD_TASKS_FROM_LC","newTaskText","newTaskStartTime","newTaskEndTime","newTaskRemindTime","tasks","isPanelVisible","sortByTaskStartTime","sort","val","val_","startTime","changeNewTaskText","text","showPanel","visible","loadTaskFromLC","localStorage","getItem","tasksArray","JSON","parse","loadTaskFromLocalStorage","createNewTaskInLC","getState","tasksPage","newTask","id","v1","endTime","remindTime","setItem","stringify","createNewTask","deleteTaskFromLC","taskId","newTasks","filter","task","deleteTask","updateTaskInLC","updateTask","tasksReducer","currentDayTasks","sortedDayTasks","Day","props","data","currentFullDate","tasksForThisDay","useEffect","dayContainerClasses","dayContainer","dateLinkClasses","dateLink","disabledDateLink","onClick","e","preventDefault","handleDateClick","to","slice","taskText","greenDot","MonthTable","gridTable","weekDay","i","weekDayName","Calendar","container","TaskItem","fullDate","taskData","taskInterval","notificationsPage","timers","find","timer","taskItem","taskInfo","taskButtons","clearInterval","intervalId","handleDeleteTask","ADD_NOTIFICATION","DELETE_NOTIFICATION","ADD_TIMER","notifications","getHoursAndMinutesFromTime","time","split","getTimeInSeconds","hours","minutes","seconds","getCurrentTime","curHours","getHours","curMinutes","getMinutes","curSeconds","getSeconds","setNotifications","tasksForDay","console","log","currentTimeInSeconds","forEach","taskHours","taskMinutes","remindHours","remindMinutes","delay","setTimeout","notificationObject","notificationReducer","note","timerId","withRouter","match","params","dateValue","tasksState","taskStartTime","taskEndTime","taskRemindTime","isVisible","monthName","monthItem","addNewTask","curTime","taskStartTimeInSeconds","taskEndTimeInSeconds","taskRemindTimeInSeconds","dateManagerContainer","closingDateManagerContainer","CloseOutlined","dateManager","successfullPanel","onKeyDown","key","dataEntry","placeholder","taskInput","target","inputContainer","htmlFor","useState","setEditText","setStartTime","setEndTime","setRemindTime","handleChangeValue","func","backdrop","taskRedactorContainer","closingTaskRedactor","taskContainer","successOnEdit","Notifications","fullCurrentDate","taskForCurDay","notificationsContainer","Notification","noteId","handleClick","notification","closeNotification","App","path","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91d353c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"TaskRedactor_backdrop__1uOoe\",\"taskRedactorContainer\":\"TaskRedactor_taskRedactorContainer__1vz1e\",\"closingTaskRedactor\":\"TaskRedactor_closingTaskRedactor__3Umgl\",\"taskInput\":\"TaskRedactor_taskInput__18Mky\",\"taskContainer\":\"TaskRedactor_taskContainer__2Uhyk\",\"taskButtons\":\"TaskRedactor_taskButtons__268fm\",\"successOnEdit\":\"TaskRedactor_successOnEdit__25_bH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dayContainer\":\"Day_dayContainer__2sceh\",\"dateLink\":\"Day_dateLink__3OBUb\",\"disabledDateLink\":\"Day_disabledDateLink__N2FXS\",\"date\":\"Day_date__1ibu9\",\"taskText\":\"Day_taskText__1aP2X\",\"greenDot\":\"Day_greenDot__1o3_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskItem\":\"TaskItem_taskItem__2s9KA\",\"taskButtons\":\"TaskItem_taskButtons__15AvL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationsContainer\":\"Notifications_notificationsContainer__O1Q79\",\"notification\":\"Notifications_notification__3llCc\",\"closeNotification\":\"Notifications_closeNotification__1iAg7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridTable\":\"MonthTable_gridTable__19vWq\",\"weekDayName\":\"MonthTable_weekDayName__S88BT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Calendar_container__1jjYu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"datePanel\":\"DatePanel_datePanel__3xXDK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"DateSelect_select__20BfG\"};","import s from './DateSelect.module.css';\r\nimport React from 'react';\r\n\r\nfunction DateSelect({ value, items, onChange }) {\r\n\r\n    const handleChange = event => onChange(Number(event.currentTarget.value))\r\n\r\n    return (\r\n        <select className={s.select} value={value} onChange={handleChange}>\r\n            {\r\n                items.map((item, index) => <option key={index} value={item.number}>{item.title}</option>)\r\n            }\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default React.memo(DateSelect);","\r\nexport default function generateMonthData(year, month) {\r\n\r\n    const allDays = [];\r\n\r\n    const curMonth = new Date(year, month, 1);\r\n    const day = curMonth.getDay();\r\n\r\n    const monthLastDay = new Date(year, month + 1, 0).getDate();\r\n\r\n    // get days from previous month\r\n    if (day > 0) {\r\n        const prevMonth = new Date(year, month, 0);\r\n        const prevMonthLastDay = prevMonth.getDate();\r\n\r\n        for (let start = prevMonthLastDay - day + 1; start <= prevMonthLastDay; start++) {\r\n            allDays.push({\r\n                curMonth: prevMonth.getMonth(),\r\n                date: start,\r\n            });\r\n        }\r\n    }\r\n\r\n    // get days from current month\r\n    for (let day = 1; day <= monthLastDay; day++) {\r\n        allDays.push({\r\n            curMonth: curMonth.getMonth(),\r\n            date: day,\r\n        })\r\n    }\r\n\r\n    // get days from next month\r\n    if (allDays.length < 42) {\r\n        const nextMonth = new Date(year, month + 1, 1).getMonth();\r\n        for (let day = 1; allDays.length < 42; day++) {\r\n            allDays.push({\r\n                curMonth: nextMonth,\r\n                date: day\r\n            });\r\n        }\r\n    }\r\n\r\n    return allDays;\r\n\r\n}","import generateMonthData from './generateMonth';\r\n\r\n// action types\r\nconst SET_YEAR = \"calendar/SET_YEAR\"\r\nconst SET_MONTH = \"calendar/SET_MONTH\"\r\n\r\n// settings from initialValue\r\nconst currentDate = new Date();\r\nconst year = currentDate.getFullYear();\r\nconst month = currentDate.getMonth();\r\nconst currentDay = currentDate.getDate();\r\nconst days = generateMonthData(year, month);\r\n\r\n\r\nexport const years = [\r\n    { title: \"2019\", number: 2019 },\r\n    { title: \"2020\", number: 2020 },\r\n    { title: \"2021\", number: 2021 },\r\n    { title: \"2022\", number: 2022 },\r\n    { title: \"2023\", number: 2023 },\r\n]\r\n\r\nexport const months = [\r\n    { title: \"Jan\", number: 0 },\r\n    { title: \"Feb\", number: 1 },\r\n    { title: \"Mar\", number: 2 },\r\n    { title: \"Apr\", number: 3 },\r\n    { title: \"May\", number: 4 },\r\n    { title: \"Jun\", number: 5 },\r\n    { title: \"Jul\", number: 6 },\r\n    { title: \"Aug\", number: 7 },\r\n    { title: \"Sep\", number: 8 },\r\n    { title: \"Oct\", number: 9 },\r\n    { title: \"Nov\", number: 10 },\r\n    { title: \"Dec\", number: 11 },\r\n]\r\n\r\n\r\nconst initialState = {\r\n    year,\r\n    month,\r\n    days,\r\n    currentYear: year,\r\n    currentMonth: month,\r\n    currentDay\r\n}\r\n\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_YEAR:\r\n            return { ...state, year: action.payload, days: generateMonthData(action.payload, state.month) }\r\n        case SET_MONTH:\r\n            return { ...state, month: action.payload, days: generateMonthData(state.year, action.payload) }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setYear = (year) => {\r\n    return {\r\n        type: SET_YEAR,\r\n        payload: year\r\n    }\r\n}\r\n\r\nexport const setMonth = (month) => {\r\n    return {\r\n        type: SET_MONTH,\r\n        payload: month\r\n    }\r\n}\r\n\r\n\r\nexport default mainReducer;","import s from './DatePanel.module.css';\r\nimport DateSelect from \"./DateSelect/DateSelect\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { years, months, setYear, setMonth } from \"../../../redux/mainReducer\";\r\n\r\n\r\n\r\nfunction DatePanel() {\r\n\r\n    const { year, month } = useSelector(state => state.calendarPage)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const changeYear = (value) => dispatch(setYear(value))\r\n    const changeMonth = (value) => dispatch(setMonth(value))\r\n\r\n\r\n    return (\r\n        <div className={s.datePanel}>\r\n            <DateSelect value={year} onChange={changeYear} items={years} />\r\n            <DateSelect value={month} onChange={changeMonth} items={months} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DatePanel;","import { v1 } from \"uuid\";\r\n\r\nconst CHANGE_NEW_TASK_TEXT = 'tasks/CHANGE_NEW_TASK_TEXT';\r\nconst CHANGE_NEW_TASK_START_TIME = 'tasks/CHANGE_NEW_TASK_START_TIME';\r\nconst CHANGE_NEW_TASK_END_TIME = 'tasks/CHANGE_NEW_TASK_END_TIME';\r\nconst CHANGE_NEW_TASK_REMIND_TIME = 'tasks/CHANGE_NEW_TASK_REMIND_TIME';\r\nexport const CREATE_NEW_TASK = 'tasks/CREATE_NEW_TASK';\r\nconst DELETE_TASK = 'tasks/DELETE_TASK';\r\nconst UPDATE_TASK = 'tasks/UPDATE_TASK';\r\nconst SHOW_SUCCESSFUL_PANEL = 'tasks/SHOW_SUCCESSFUL_PANEL'\r\nconst LOAD_TASKS_FROM_LC = 'tasks/LOAD_TASKS_FROM_LC'\r\n\r\nconst initialState = {\r\n    newTaskText: '',\r\n    newTaskStartTime: '10:00',\r\n    newTaskEndTime: '11:00',\r\n    newTaskRemindTime: '00:00',\r\n    tasks: {\r\n\r\n    },\r\n    isPanelVisible: false\r\n}\r\n\r\nconst sortByTaskStartTime = (tasks) => {\r\n    return tasks.sort((val, val_) => val.startTime > val_.startTime ? 1 : -1);\r\n}\r\n\r\nconst tasksReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case CHANGE_NEW_TASK_TEXT:\r\n            return { ...state, newTaskText: action.text }\r\n\r\n        case CHANGE_NEW_TASK_START_TIME:\r\n            return { ...state, newTaskStartTime: action.startTime }\r\n\r\n        case CHANGE_NEW_TASK_END_TIME:\r\n            return { ...state, newTaskEndTime: action.endTime }\r\n\r\n        case CHANGE_NEW_TASK_REMIND_TIME:\r\n            return { ...state, newTaskRemindTime: action.remindTime }\r\n\r\n        case CREATE_NEW_TASK:\r\n\r\n            const currentDayTasks = state.tasks[action.date] || [];\r\n\r\n            const sortedDayTasks = sortByTaskStartTime([...currentDayTasks, action.newTask])\r\n\r\n            return {\r\n                ...state,\r\n                tasks: {\r\n                    ...state.tasks,\r\n                    [action.date]: sortedDayTasks\r\n                }\r\n            }\r\n\r\n\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: {\r\n                    ...state.tasks,\r\n                    [action.date]: state.tasks[action.date].filter(task => task.id !== action.id)\r\n                }\r\n            }\r\n\r\n        case SHOW_SUCCESSFUL_PANEL:\r\n            return { ...state, isPanelVisible: action.visible }\r\n\r\n\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: {\r\n                    ...state.tasks,\r\n                    [action.date]: sortByTaskStartTime(state.tasks[action.date].map(task => {\r\n                        return task.id === action.id ? { ...task, ...action.payload } : task;\r\n                    }))\r\n                }\r\n            };\r\n\r\n        case LOAD_TASKS_FROM_LC:\r\n            return {\r\n                ...state,\r\n                tasks: {\r\n                    ...state.tasks,\r\n                    [action.date]: sortByTaskStartTime(action.tasks)\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const changeNewTaskText = (text) => {\r\n    return {\r\n        type: CHANGE_NEW_TASK_TEXT,\r\n        text\r\n    }\r\n}\r\n\r\nexport const changeNewTaskStartTime = (startTime) => {\r\n    return {\r\n        type: CHANGE_NEW_TASK_START_TIME,\r\n        startTime\r\n    }\r\n}\r\n\r\nexport const changeNewTaskEndTime = (endTime) => {\r\n    return {\r\n        type: CHANGE_NEW_TASK_END_TIME,\r\n        endTime\r\n    }\r\n}\r\n\r\nexport const changeNewTaskRemindTime = (remindTime) => {\r\n    return {\r\n        type: CHANGE_NEW_TASK_REMIND_TIME,\r\n        remindTime\r\n    }\r\n}\r\n\r\n\r\nexport const createNewTask = (date, newTask) => {\r\n    return {\r\n        type: CREATE_NEW_TASK,\r\n        date,\r\n        newTask\r\n    }\r\n}\r\n\r\nexport const deleteTask = (date, id) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        date,\r\n        id\r\n    }\r\n}\r\n\r\nexport const showPanel = (visible) => {\r\n    return {\r\n        type: SHOW_SUCCESSFUL_PANEL,\r\n        visible\r\n    }\r\n}\r\n\r\nexport const updateTask = (date, id, text, startTime, endTime, remindTime) => {\r\n    return {\r\n        type: UPDATE_TASK,\r\n        date,\r\n        id,\r\n        payload: {\r\n            text, startTime, endTime, remindTime\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const loadTaskFromLocalStorage = (date, tasks) => {\r\n    return {\r\n        type: LOAD_TASKS_FROM_LC,\r\n        date,\r\n        tasks\r\n    }\r\n}\r\n\r\n\r\nexport const loadTaskFromLC = (date) => (dispatch) => {\r\n\r\n    const tasks = localStorage.getItem(date);\r\n\r\n    if (tasks) {\r\n        const tasksArray = JSON.parse(tasks);\r\n\r\n        if (tasksArray.length > 0) dispatch(loadTaskFromLocalStorage(date, tasksArray));\r\n    }\r\n}\r\n\r\nexport const createNewTaskInLC = (date) => (dispatch, getState) => {\r\n\r\n    const state = getState().tasksPage;\r\n\r\n    const newTask = {\r\n        id: v1(),\r\n        text: state.newTaskText,\r\n        startTime: state.newTaskStartTime,\r\n        endTime: state.newTaskEndTime,\r\n        remindTime: state.newTaskRemindTime\r\n    }\r\n\r\n    let tasks = localStorage.getItem(date);\r\n    tasks = tasks ? JSON.parse(tasks) : [];\r\n\r\n    localStorage.setItem(date, JSON.stringify([...tasks, newTask]))\r\n\r\n    dispatch(createNewTask(date, newTask))\r\n}\r\n\r\nexport const deleteTaskFromLC = (date, taskId) => (dispatch) => {\r\n\r\n    const tasks = JSON.parse(localStorage.getItem(date));\r\n    const newTasks = tasks.filter(task => task.id !== taskId);\r\n    localStorage.setItem(date, JSON.stringify(newTasks));\r\n\r\n    dispatch(deleteTask(date, taskId));\r\n}\r\n\r\nexport const updateTaskInLC = (date, id, text, startTime, endTime, remindTime) => (dispatch) => {\r\n\r\n    const tasks = JSON.parse(localStorage.getItem(date));\r\n    const newTasks = tasks.map(task => task.id === id ? { ...task, text, startTime, endTime, remindTime } : task);\r\n    localStorage.setItem(date, JSON.stringify(newTasks));\r\n\r\n    dispatch(updateTask(date, id, text, startTime, endTime, remindTime));\r\n}\r\n\r\n\r\n\r\n\r\nexport default tasksReducer;","import { NavLink } from 'react-router-dom';\r\nimport s from './Day.module.css';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { loadTaskFromLC } from '../../../../redux/tasksReducer';\r\n\r\nfunction Day(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const { year, month, currentDay } = useSelector(state => state.calendarPage)\r\n    const { curMonth, date } = props.data;\r\n\r\n    const currentFullDate = `${year}-${curMonth}-${date}`\r\n\r\n\r\n    // Getting tasks for this date\r\n    const AllTasks = useSelector(state => state.tasksPage.tasks)\r\n    const tasksForThisDay = AllTasks[currentFullDate] || [];\r\n\r\n    //getting tasks from localStorage\r\n    useEffect(() => {\r\n\r\n        if (tasksForThisDay.length === 0) {\r\n            dispatch(loadTaskFromLC(currentFullDate));\r\n        }\r\n\r\n    }, [currentFullDate]);\r\n\r\n\r\n    // Styles for other months days\r\n    let dayContainerClasses = `${s.dayContainer}`\r\n    let dateLinkClasses = `${s.dateLink}`\r\n    if (curMonth !== month) {\r\n        dateLinkClasses += ` ${s.disabledDateLink}`\r\n    }\r\n\r\n    const handleDateClick = (e, curMonth) => {\r\n        if (curMonth !== month) e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className={dayContainerClasses}>\r\n            <NavLink onClick={(e) => handleDateClick(e, curMonth)} className={dateLinkClasses} to={`/date/${currentFullDate}`}>\r\n                <span className={s.date}> {date} </span>\r\n\r\n                {tasksForThisDay.length > 0 &&\r\n                    tasksForThisDay.slice(0, 3).map(task => {\r\n\r\n                        let taskText = task.text.length < 8 ? task.text : task.text.slice(0, 8) + '...';\r\n\r\n                        return <div key={task.id} className={s.taskText}>\r\n                            <span className={s.greenDot}></span>\r\n                            <span>{taskText}</span>\r\n                        </div>\r\n                    })\r\n                }\r\n            </NavLink>\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(Day);","import { useSelector } from \"react-redux\";\r\nimport s from './MonthTable.module.css';\r\nimport Day from './Day/Day';\r\n\r\n\r\nfunction MonthTable() {\r\n\r\n    const days = useSelector(state => state.calendarPage.days);\r\n\r\n    const weekDays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n\r\n    return (\r\n        <div className={s.gridTable}>\r\n            {\r\n                weekDays.map((weekDay, i) => <div className={s.weekDayName} key={i}>{weekDay}</div>)\r\n            }\r\n            {\r\n                days.map((day, i) => <Day key={i} data={day} />)\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MonthTable;","import s from \"./Calendar.module.css\";\r\n\r\nimport DatePanel from \"./DatePanel/DatePanel\";\r\nimport MonthTable from \"./MonthTable/MonthTable\";\r\n\r\nfunction Calendar() {\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <DatePanel />\r\n            <MonthTable />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar;","import s from './TaskItem.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteTaskFromLC } from '../../../redux/tasksReducer';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nfunction TaskItem(props) {\r\n\r\n    const fullDate = props.fullDate;\r\n\r\n    const {\r\n        id,\r\n        text,\r\n        startTime,\r\n        endTime,\r\n    } = props.taskData;\r\n\r\n    const taskInterval = useSelector(state => state.notificationsPage.timers).find(timer => timer.taskId === id);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDeleteTask = (date, id) => {\r\n\r\n        if (taskInterval) clearInterval(taskInterval.intervalId);\r\n\r\n        dispatch(deleteTaskFromLC(date, id))\r\n    }\r\n\r\n    return (\r\n        <div className={s.taskItem}>\r\n            <div className={s.taskInfo}>\r\n                <p>{text}</p>\r\n                <p>c {startTime} до {endTime}</p>\r\n            </div>\r\n            <div className={s.taskButtons}>\r\n                <NavLink to={`/date/${fullDate}/edit/${id}`}><button>Редактировать</button></NavLink>\r\n                <button onClick={() => handleDeleteTask(fullDate, id)}>Удалить</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskItem;","const ADD_NOTIFICATION = 'notifications/ADD_NOTIFICATION'\r\nconst DELETE_NOTIFICATION = 'notifications/DELETE_NOTIFICATION'\r\nconst ADD_TIMER = 'notifications/ADD_TIMER'\r\n\r\nconst initialState = {\r\n    notifications: [],\r\n    timers: [],\r\n};\r\n\r\nconst notificationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case ADD_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: [...state.notifications, action.payload]\r\n            }\r\n\r\n        case DELETE_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: state.notifications.filter(note => note.id !== action.id),\r\n                timers: state.timers.filter(timerId => timerId !== action.id)\r\n            }\r\n\r\n        case ADD_TIMER:\r\n            return {\r\n                ...state,\r\n                timers: [\r\n                    ...state.timers,\r\n                    {\r\n                        taskId: action.taskId,\r\n                        intervalId: action.intervalId\r\n                    }\r\n                ]\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addNotification = (payload) => {\r\n    return {\r\n        type: ADD_NOTIFICATION,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const removeNotification = (id) => {\r\n    return {\r\n        type: DELETE_NOTIFICATION,\r\n        id\r\n    }\r\n}\r\n\r\nexport const addTimer = (taskId, intervalId) => {\r\n    return {\r\n        type: ADD_TIMER,\r\n        taskId,\r\n        intervalId\r\n    }\r\n}\r\n\r\n\r\nexport const getHoursAndMinutesFromTime = (time) => time.split(':').map(value => Number(value));\r\n\r\nexport const getTimeInSeconds = (hours, minutes, seconds = 0) => hours * 3600 + minutes * 60 + seconds\r\n\r\nexport const getCurrentTime = () => {\r\n    const time = new Date();\r\n    const curHours = time.getHours();\r\n    const curMinutes = time.getMinutes();\r\n    const curSeconds = time.getSeconds();\r\n\r\n    return getTimeInSeconds(curHours, curMinutes, curSeconds);\r\n}\r\n\r\n\r\n\r\n\r\nexport const setNotifications = (tasksForDay) => (dispatch, getState) => {\r\n\r\n    console.log(' Устанавливаем напоминания ')\r\n    const state = getState().notificationsPage.timers;\r\n\r\n    const currentTimeInSeconds = getCurrentTime();\r\n\r\n    tasksForDay.forEach(task => {\r\n\r\n        if (!state.find(timer => timer.taskId === task.id)) {\r\n\r\n            // время старта таски\r\n            const [taskHours, taskMinutes] = getHoursAndMinutesFromTime(task.startTime)\r\n\r\n            // время напоминания о ней\r\n            const [remindHours, remindMinutes] = getHoursAndMinutesFromTime(task.remindTime);\r\n\r\n            // время в секундах\r\n            const taskStartTime = getTimeInSeconds(taskHours, taskMinutes);\r\n            const remindTime = getTimeInSeconds(remindHours, remindMinutes);\r\n\r\n            const delay = taskStartTime - remindTime - currentTimeInSeconds;\r\n\r\n            if (delay >= 0) {\r\n                const taskInterval = setTimeout(() => {\r\n\r\n                    dispatch(addNotification(notificationObject));\r\n                    // setTimeout(() => {\r\n                    //     dispatch(removeNotification(task.id));\r\n                    // }, 10000)\r\n\r\n                }, delay * 1000);\r\n\r\n                dispatch(addTimer(task.id, taskInterval));\r\n\r\n                const notificationObject = {\r\n                    id: task.id,\r\n                    intervalId: taskInterval,\r\n                    text: task.text,\r\n                    startTime: task.startTime,\r\n                    endTime: task.endTime\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n    })\r\n\r\n}\r\n\r\n\r\nexport default notificationReducer;","import s from './DateManager.module.css';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\n\r\nimport { CloseOutlined } from '@ant-design/icons';\r\nimport { months } from '../../redux/mainReducer';\r\nimport { createNewTaskInLC, changeNewTaskEndTime, changeNewTaskRemindTime, changeNewTaskStartTime, changeNewTaskText, showPanel } from '../../redux/tasksReducer';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TaskItem from './TaskItem/TaskItem';\r\n\r\nimport { getCurrentTime, getTimeInSeconds, getHoursAndMinutesFromTime } from '../../redux/notificationReducer';\r\n\r\n\r\nfunction DateManager(props) {\r\n\r\n    const routerParams = props.match.params;\r\n\r\n    const fullDate = routerParams.dateValue;\r\n    const [year, month, date] = fullDate.split('-');\r\n\r\n    //getting all data from state\r\n    const tasksState = useSelector(state => state.tasksPage);\r\n    const tasks = tasksState.tasks;\r\n    const tasksForThisDay = tasks[fullDate];\r\n\r\n    // newTask properties\r\n    const taskText = tasksState.newTaskText;\r\n    const taskStartTime = tasksState.newTaskStartTime;\r\n    const taskEndTime = tasksState.newTaskEndTime;\r\n    const taskRemindTime = tasksState.newTaskRemindTime;\r\n\r\n    //panel for succesfull addNewTask\r\n    const isVisible = tasksState.isPanelVisible;\r\n\r\n    const monthName = months.find(monthItem => monthItem.number === Number(month)).title;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleNewTaskTextChange = (event) => {\r\n        dispatch(changeNewTaskText(event.target.value));\r\n    }\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === \"Enter\") {\r\n            addNewTask();\r\n        }\r\n\r\n    }\r\n\r\n    const updateStartTime = (event) => {\r\n        dispatch(changeNewTaskStartTime(event.target.value));\r\n    }\r\n\r\n    const updateEndTime = (event) => {\r\n        dispatch(changeNewTaskEndTime(event.target.value));\r\n    }\r\n\r\n    const updateRemindTime = (event) => {\r\n        dispatch(changeNewTaskRemindTime(event.target.value));\r\n    }\r\n\r\n    const addNewTask = () => {\r\n\r\n        const curTime = getCurrentTime();\r\n        const taskStartTimeInSeconds = getTimeInSeconds(...getHoursAndMinutesFromTime(taskStartTime))\r\n        const taskEndTimeInSeconds = getTimeInSeconds(...getHoursAndMinutesFromTime(taskEndTime))\r\n        const taskRemindTimeInSeconds = getTimeInSeconds(...getHoursAndMinutesFromTime(taskRemindTime))\r\n\r\n        const isValidRemindTime = taskStartTimeInSeconds > (curTime + taskRemindTimeInSeconds);\r\n\r\n        if (taskText && isValidRemindTime && taskEndTimeInSeconds > taskStartTimeInSeconds) {\r\n            dispatch(createNewTaskInLC(fullDate));\r\n            dispatch(changeNewTaskText(''));\r\n            dispatch(showPanel(true));\r\n            setTimeout(() => {\r\n                dispatch(showPanel(false));\r\n            }, 1000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.dateManagerContainer}>\r\n            <NavLink className={s.closingDateManagerContainer} to='/'> <CloseOutlined /> </NavLink>\r\n\r\n            <div className={s.dateManager}>\r\n\r\n                {/* Панель, соообщающая о успешном добавлении задачи */}\r\n                {isVisible && <div className={s.successfullPanel}>Событие добавлено!</div>}\r\n\r\n                <h1 className={s.currentDate}>{date} {monthName} {year}</h1>\r\n\r\n                <div className={s.tasks} onKeyDown={handleKeyDown}>\r\n                    <div className={s.dataEntry}>\r\n                        <input placeholder=\"Новая задача\" className={s.taskInput} value={taskText} onChange={handleNewTaskTextChange} />\r\n\r\n                        <div className={s.inputContainer}>\r\n                            <label htmlFor=\"startTime\"> Начало </label>\r\n                            <input id=\"startTime\" className={s.taskInput} value={taskStartTime} onChange={updateStartTime} type=\"time\" />\r\n                        </div>\r\n\r\n                        <div className={s.inputContainer}>\r\n                            <label htmlFor=\"endTime\"> Конец </label>\r\n                            <input id=\"endTime\" className={s.taskInput} value={taskEndTime} onChange={updateEndTime} type=\"time\" />\r\n                        </div>\r\n\r\n                        <div className={s.inputContainer}>\r\n                            <label htmlFor=\"remindTime\"> Напомнить за </label>\r\n                            <input id=\"remindTime\" className={s.taskInput} value={taskRemindTime} onChange={updateRemindTime} type=\"time\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button onClick={addNewTask} className={s.addNewTask}>Создать новую задачу</button>\r\n\r\n                    {/*  Отображаем все задачи на текущую дату */}\r\n                    <>\r\n                        <h1>Текущие цели:</h1>\r\n                        {tasksForThisDay && tasksForThisDay.map(task => <TaskItem key={task.id} fullDate={fullDate} taskData={task} />)}\r\n                    </>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default withRouter(DateManager);","import s from './TaskRedactor.module.css';\r\nimport { useState } from 'react';\r\nimport { withRouter, NavLink } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { CloseOutlined } from '@ant-design/icons'\r\nimport { updateTaskInLC } from '../../redux/tasksReducer';\r\n\r\nfunction TaskRedactor(props) {\r\n\r\n    const { dateValue, id } = props.match.params;\r\n    const task = useSelector(state => state.tasksPage.tasks[dateValue].find(task => task.id === id));\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [text, setEditText] = useState(task.text);\r\n    const [startTime, setStartTime] = useState(task.startTime);\r\n    const [endTime, setEndTime] = useState(task.endTime);\r\n    const [remindTime, setRemindTime] = useState(task.remindTime);\r\n\r\n    const handleChangeValue = (e, func) => {\r\n        func(e.target.value)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        if (text && startTime && endTime) {\r\n            dispatch(updateTaskInLC(dateValue, id, text, startTime, endTime, remindTime));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.backdrop}></div>\r\n            <div className={s.taskRedactorContainer}>\r\n                <NavLink to={`/date/${dateValue}`} className={s.closingTaskRedactor}> <CloseOutlined /> </NavLink>\r\n                <h1>Редактирование задачи</h1>\r\n                <input className={s.taskInput} value={text} onChange={(e) => handleChangeValue(e, setEditText)} />\r\n                <div className={s.taskContainer}>\r\n                    <label htmlFor=\"changeStartTime\">Начало</label>\r\n                    <input id=\"changeStartTime\" className={s.taskInput} value={startTime} onChange={(e) => handleChangeValue(e, setStartTime)} type=\"time\" />\r\n                </div>\r\n                <div className={s.taskContainer}>\r\n                    <label htmlFor=\"changeEndTime\">Конец</label>\r\n                    <input id=\"changeEndTime\" className={s.taskInput} value={endTime} onChange={(e) => handleChangeValue(e, setEndTime)} type=\"time\" />\r\n                </div>\r\n                <div className={s.taskContainer}>\r\n                    <label htmlFor=\"changeRemindTime\">Напомнить за</label>\r\n                    <input id=\"changeRemindTime\" className={s.taskInput} value={remindTime} onChange={(e) => handleChangeValue(e, setRemindTime)} type=\"time\" />\r\n                </div>\r\n                <NavLink className={s.successOnEdit} onClick={handleClick} to={`/date/${dateValue}`} >OK</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(TaskRedactor);","import s from './Notifications.module.css';\r\nimport { CloseOutlined } from '@ant-design/icons';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setNotifications } from '../../redux/notificationReducer';\r\nimport { removeNotification } from '../../redux/notificationReducer';\r\n\r\nfunction Notifications() {\r\n\r\n    const notifications = useSelector(state => state.notificationsPage.notifications);\r\n    console.log('notifications >>> ', notifications, notifications.length);\r\n\r\n    const { currentYear, currentMonth, currentDay } = useSelector(state => state.calendarPage);\r\n    const fullCurrentDate = `${currentYear}-${currentMonth}-${currentDay}`;\r\n    const allTasks = useSelector(state => state.tasksPage.tasks);\r\n    const taskForCurDay = allTasks[fullCurrentDate] || [];\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setNotifications(taskForCurDay))\r\n    }, [taskForCurDay])\r\n\r\n\r\n    return (\r\n        <div className={s.notificationsContainer}>\r\n            {\r\n                notifications.length > 0 && notifications.map(note => {\r\n                    return <Notification key={note.id} noteId={note.id} text={note.text} startTime={note.startTime} endTime={note.endTime} />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notifications;\r\n\r\n\r\n\r\nfunction Notification(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = (noteId) => {\r\n        dispatch(removeNotification(noteId))\r\n    }\r\n\r\n    return (\r\n        <div className={s.notification}>\r\n            <button onClick={() => handleClick(props.noteId)} className={s.closeNotification} to='/'> <CloseOutlined /> </button>\r\n            <h3>Напоминание</h3>\r\n            <p>У вас запланировано \"{props.text}\" с {props.startTime} до {props.endTime}</p>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Calendar from './Components/Calendar/Calendar';\nimport DateManager from './Components/DateManager/DateManager';\nimport TaskRedactor from './Components/TaskRedactor/TaskRedactor';\nimport Notifications from './Components/Notifications/Notifications';\n\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Route path='/' >\n          <Calendar />\n          <Notifications />\n        </Route>\n        <Route path='/date/:dateValue'>\n          <DateManager />\n        </Route>\n        <Route path='/date/:dateValue/edit/:id'>\n          <TaskRedactor />\n        </Route>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport mainReducer from \"./mainReducer\";\r\nimport tasksReducer from \"./tasksReducer\";\r\nimport notificationReducer from \"./notificationReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    calendarPage: mainReducer,\r\n    tasksPage: tasksReducer,\r\n    notificationsPage: notificationReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dateManagerContainer\":\"DateManager_dateManagerContainer__3QOmv\",\"dateManager\":\"DateManager_dateManager__38OQq\",\"dataManagerAppearance\":\"DateManager_dataManagerAppearance__1gcjD\",\"successfullPanel\":\"DateManager_successfullPanel__24MrC\",\"closingDateManagerContainer\":\"DateManager_closingDateManagerContainer__2NYdC\",\"currentDate\":\"DateManager_currentDate__3T4-B\",\"addNewTask\":\"DateManager_addNewTask__L7hMH\",\"tasks\":\"DateManager_tasks__or5hu\",\"inputContainer\":\"DateManager_inputContainer__vUM-K\",\"taskInput\":\"DateManager_taskInput__2txvL\"};"],"sourceRoot":""}